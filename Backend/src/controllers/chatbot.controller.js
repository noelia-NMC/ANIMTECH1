// ARCHIVO COMPLETO Y DEFINITIVO: Backend/src/controllers/chatbot.controller.js
// (Con prompt ultra-enfocado en veterinaria y AnimTech)

const { GoogleGenerativeAI } = require("@google/generative-ai");
const Groq = require("groq-sdk");
const OpenAI = require("openai");
const fs = require('fs').promises;

// --- INICIALIZACI√ìN DE LOS TRES CLIENTES DE IA ---
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// --- EL NUEVO CEREBRO DE DR. ANIMBOT (VERSI√ìN S√öPER ENFOCADA) ---
const expertVetPrompt = `
Eres Dr. AnimBot üêï‚Äç‚öïÔ∏è, una IA experta **exclusivamente en medicina veterinaria** y en la plataforma **AnimTech**. Tu √∫nica misi√≥n es asistir a profesionales veterinarios. Eres su colega digital.

### üåü Tu personalidad
- **Colega experto:** Amigable, profesional y siempre enfocado en casos cl√≠nicos. Usas emojis üêæü©∫üî¨.
- **Contextualmente inteligente:** Sabes que est√°s en la plataforma web de AnimTech y te diriges a un veterinario.

### ü©∫ Tu conocimiento veterinario (absoluto y √∫nico)
Tu conocimiento es **√∫nica y exclusivamente** sobre medicina veterinaria. Cubres todas las especialidades: medicina interna, farmacolog√≠a, cirug√≠a, emergencias, toxicolog√≠a, nutrici√≥n y comportamiento en todas las especies. **IGNORAS Y RECHAZAS CUALQUIER OTRO TEMA.**

### üöÄ Tu conocimiento sobre el ecosistema AnimTech
Conoces la plataforma a la perfecci√≥n, desde la perspectiva de un veterinario.

**Si te preguntan "¬øqu√© es AnimTech?" o similar:**
"¬°Claro! Te explico nuestro ecosistema. AnimTech es una soluci√≥n integral para el cuidado animal que conecta a due√±os y veterinarios. Se divide en tres partes:\n\n1.  **Nuestra plataforma web (donde estamos ahora):** Este es nuestro centro de operaciones cl√≠nico. Desde aqu√≠ gestionamos pacientes (mascotas), agendamos turnos, documentamos historiales cl√≠nicos y atendemos las teleconsultas que nos llegan desde la app m√≥vil.\n2.  **La aplicaci√≥n m√≥vil:** Es la herramienta para los due√±os de mascotas. Les permite ver los datos de salud de sus animales, agendar citas contigo y solicitar teleconsultas. Tambi√©n incluye una funci√≥n de rescate comunitario para animales en la calle.\n3.  **El collar inteligente:** Es un dispositivo para perros grandes que se sincroniza con la app m√≥vil del due√±o, monitoreando su ubicaci√≥n, temperatura y actividad. Es una gran herramienta de prevenci√≥n que nos puede dar datos valiosos en una consulta."

### ‚ö†Ô∏è REGLAS DE INTERACCI√ìN (¬°LA M√ÅS IMPORTANTE!)
-   **ENFOQUE TOTAL:** Si la pregunta o la imagen **NO es claramente sobre medicina veterinaria o la plataforma AnimTech** (por ejemplo: matem√°ticas, c√≥digo, pol√≠tica, arte, etc.), DEBES rechazarla amablemente y reenfocar la conversaci√≥n.
    -   **Ejemplo de rechazo:** "¬°Hola colega! üòä He analizado la imagen, pero no parece estar relacionada con un caso cl√≠nico o un animal. Mi especialidad es 100% la medicina veterinaria. ¬øHay alguna radiograf√≠a, lesi√≥n, o caso de un paciente en el que pueda ayudarte? üêæ"
-   **NO CONFUNDIR PLATAFORMAS:** Nunca sugieras al veterinario usar funciones de la app m√≥vil. Expl√≠calas como herramientas que usan los due√±os.
-   **ASISTENCIA, NO REEMPLAZO:** Finaliza consultas complejas con: "Recuerda, esto es una gu√≠a. Tu evaluaci√≥n directa del paciente es fundamental."
-   **SEGURIDAD FARMACOL√ìGICA:** Al dar dosis: "‚ö†Ô∏è Dosis de referencia. Siempre confirma con la literatura actual y ajusta al paciente."

¬°Est√°s listo para ser el mejor y m√°s enfocado colega digital para los veterinarios de AnimTech! üêæ"
`;

// --- (El resto de las funciones se mantienen igual, pero las incluyo para que sea completo) ---

const handleTextQuery = async (req, res) => {
    const { query, history: historyJSON } = req.body;
    let history = [];
    try { if (historyJSON) history = JSON.parse(historyJSON); } catch (e) { console.warn("Historial de chat inv√°lido."); }
    const chatHistory = (history || []).slice(-8).map(msg => ({ role: msg.role === 'model' ? 'assistant' : 'user', content: msg.parts[0].text }));
    const messages = [{ role: "system", content: expertVetPrompt }, ...chatHistory, { role: "user", content: query }];
    const strategies = [
        { name: 'groq', fn: () => groq.chat.completions.create({ messages, model: "llama3-8b-8192" }) },
        { name: 'openai', fn: () => openai.chat.completions.create({ messages, model: "gpt-3.5-turbo" }) },
        { name: 'gemini', fn: () => queryGeminiTextOnly(query, history) }
    ];
    for (const strategy of strategies) {
        try {
            const response = await strategy.fn();
            const reply = response.choices ? response.choices[0]?.message?.content : response;
            if (reply?.trim()) {
                console.log(`‚úÖ AnimBot (Texto) respondi√≥ con ${strategy.name.toUpperCase()}`);
                return res.json({ reply: reply.trim(), model: strategy.name });
            }
        } catch (error) { console.warn(`‚ùå Error de texto con ${strategy.name}:`, error.message); }
    }
    res.status(503).json({ error: "Mis sistemas est√°n un poco ocupados ü©∫. ¬øPodr√≠as reformular tu consulta veterinaria?" });
};

const handleImageQuery = async (req, res) => {
    const { query, history: historyJSON } = req.body;
    if (!req.file) return res.status(400).json({ error: "No se ha proporcionado ninguna imagen." });
    let history = [];
    try { if (historyJSON) history = JSON.parse(historyJSON); } catch (e) { console.warn("Historial de chat inv√°lido."); }
    try {
        const imageBuffer = await fs.readFile(req.file.path);
        const imageData = { inlineData: { data: imageBuffer.toString('base64'), mimeType: req.file.mimetype } };
        await fs.unlink(req.file.path);
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        const promptForImage = `Contexto de la conversaci√≥n:\n${history.map(h => `${h.role === 'user' ? 'Veterinario' : 'Dr. AnimBot'}: ${h.parts[0].text}`).join('\n')}\n\nConsulta del veterinario sobre la imagen: "${query}"\n\nTu tarea: Como Dr. AnimBot (definido por el prompt del sistema), analiza la imagen y responde.`;
        const result = await model.generateContent([expertVetPrompt, promptForImage, imageData]);
        const reply = result.response.text();
        if (reply?.trim()) {
            console.log("‚úÖ AnimBot (Imagen) respondi√≥ con Gemini");
            return res.json({ reply: reply.trim(), model: 'gemini' });
        } else { throw new Error("Gemini devolvi√≥ una respuesta vac√≠a para la imagen."); }
    } catch (error) {
        console.error("‚ùå Error fatal al procesar la imagen con Gemini:", error.message);
        res.status(500).json({ error: "Lo siento, tuve un problema analizando la imagen üî¨. ¬øPodr√≠as intentarlo de nuevo?" });
    }
};

async function queryGeminiTextOnly(query, history) {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const geminiHistory = [{ role: "user", parts: [{ text: expertVetPrompt }] }, { role: "model", parts: [{ text: "¬°Hola! Soy Dr. AnimBot." }] }, ...(history || []).slice(-8)];
    const chat = model.startChat({ history: geminiHistory });
    const result = await chat.sendMessage(query);
    return result.response.text();
}

module.exports = { 
    handleTextQuery,
    handleImageQuery 
};